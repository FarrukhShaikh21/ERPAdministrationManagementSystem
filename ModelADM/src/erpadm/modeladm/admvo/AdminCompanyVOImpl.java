package erpadm.modeladm.admvo;

import erpadm.modeladm.admvo.common.AdminCompanyVO;

import erpglobals.modelglobals.ERPGlobalPLSQLClass;

import erpglobals.modelglobals.ERPViewObjectImpl;

import java.sql.ResultSet;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteriaManager;
import oracle.jbo.ViewObject;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 03 10:49:44 PKT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AdminCompanyVOImpl extends ERPViewObjectImpl implements AdminCompanyVO {
    /**
     * This is the default constructor (do not remove).
     */
    public AdminCompanyVOImpl() {
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        ViewRowImpl rimpl=value;
         
         String result=ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),"select countryname from sm_country where countrycode="+value.getAttribute("CountryId"));
        if (!result.equals("-")) {
         value.setAttribute("txtCountryName", result);
        }
        
        result=ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),"select cityname from sm_city where citycode="+value.getAttribute("CityId"));
        
        if (!result.equals("-")) {
         value.setAttribute("txtCityName", result);
        }
        
        /*
        result=ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),"select COMPANY_SHORT_CODE from ADMIN_COMPANY where COMP_CODE="+value.getAttribute("ParentCompCode"));
        if (!result.equals("-")) {
         value.setAttribute("txtParentCompShortCode", result);
        }*/

        /*
        result =ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),"select COMPANY_SHORT_NAME from ADMIN_COMPANY where COMP_CODE=" +value.getAttribute("ParentCompCode"));
        if (!result.equals("-")) {
         value.setAttribute("txtParentCompanyShortName", result);
        }*/

       /* result =ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),"select COMPANY_NAME from ADMIN_COMPANY where COMP_CODE=" +value.getAttribute("ParentCompCode"));
        if (!result.equals("-")) {
         value.setAttribute("txtParentCompanyName", result);
        }*/ 
       
        result =ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),"select PARENT_COMP_CODE from ADMIN_COMPANY where PARENT_COMP_CODE IS NOT NULL AND COMP_CODE=" +value.getAttribute("ParentCompCode"));
        if (!result.equals("-")) {
         value.setAttribute("txtParentParentCompanyCode", result);
        }  

        /*result =ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),"select PARENT_COMP_CODE from ADMIN_COMPANY where  PARENT_COMP_CODE IS NOT NULL AND COMP_CODE=" +value.getAttribute("CompCode"));
        if (!result.equals("-")) {
         value.setAttribute("txtParentCompanyCode", result);
        } */ 
        
         /*
        result=ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),"select COMPANY_TYPE_NAME from ADMIN_COMPANY_TYPE where COMPANY_TYPE_SNO="+value.getAttribute("CompanyTypeSno"));
        if (!result.equals("-")) {
         value.setAttribute("txtCompanyTypeName", result);
        }*/

        result=ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),
        " SELECT COALESCE(CONCAT(MAX(CT.COMPANY_TYPE_SNO),''),'-') COMPANY_TYPE_SNO" + 
        " FROM   ADMIN_COMPANY_TYPE CT "+
        " WHERE  CT.TYPE_LEVEL ="+
        " (select CCT.TYPE_LEVEL+1"+ 
        " from    ADMIN_COMPANY_TYPE CCT "+
        " where   CCT.COMPANY_TYPE_SNO="+value.getAttribute("CompanyTypeSno") +
        " AND     CCT.IS_ACTIVE='Y' "+
        " AND     CT.COMPANY_ID=CCT.COMPANY_ID) "+ 
        " AND     CT.IS_ACTIVE='Y'"+ 
        " AND     CT.COMPANY_ID="+ERPGlobalPLSQLClass.doGetModelGlobalDefCompany()+
        " AND     (CT.COMPANY_GROUP_SNO="+value.getAttribute("txtCurrentGroupSno")+" OR "+value.getAttribute("txtCurrentGroupSno") +"=7)");
                
        /*" SELECT CT.COMPANY_TYPE_SNO" + 
       " FROM   ADMIN_COMPANY_TYPE CT "+
       " WHERE  CT.TYPE_LEVEL ="+
       " (select CCT.TYPE_LEVEL+1"+ 
       " from    ADMIN_COMPANY_TYPE CCT "+
       " where   CCT.COMPANY_TYPE_SNO="+value.getAttribute("CompanyTypeSno") +
       " AND     CCT.IS_ACTIVE='Y' "+
       " AND     CT.COMPANY_ID=CCT.COMPANY_ID) "+ 
       " AND     CT.IS_ACTIVE='Y'"+ 
       " AND     CT.COMPANY_ID="+ERPGlobalPLSQLClass.doGetModelGlobalDefCompany()+
       " AND     CT.COMPANY_GROUP_SNO="+value.getAttribute("txtCurrentGroupSno"));*/
        if (!result.equals("-")) {
         value.setAttribute("txtNextCompanyTypeSno", result);
        }

        result=ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),"SELECT COUNT(CT.COMPANY_TYPE_SNO) COUNT_NEXT_COMPANY_TYPE FROM   ADMIN_COMPANY_TYPE CT WHERE  CT.TYPE_LEVEL =(select CCT.TYPE_LEVEL+1 from   ADMIN_COMPANY_TYPE CCT where  CCT.COMPANY_TYPE_SNO="+ value.getAttribute("CompanyTypeSno") +" AND  CCT.IS_ACTIVE='Y' AND CT.COMPANY_ID=CCT.COMPANY_ID) AND CT.IS_ACTIVE='Y' AND CT.COMPANY_ID="+ERPGlobalPLSQLClass.doGetModelGlobalDefCompany() );
        if (!result.equals("-")) {
         value.setAttribute("txtCountNextCompanyType", result);
        }
       
        result=ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),"select ac.COMPANY_TYPE_SNO from admin_company ac  where  ac.comp_code="+value.getAttribute("ParentCompCode"));
        if (!result.equals("-")) {
         value.setAttribute("txtParentCompanyTypeSno", result);
        }
        // 
        //
       //
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

    /**
     * Returns the variable value for P_ADF_PARENT_COMP_CODE.
     * @return variable value for P_ADF_PARENT_COMP_CODE
     */
    public Integer getP_ADF_PARENT_COMP_CODE() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_PARENT_COMP_CODE");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_PARENT_COMP_CODE.
     * @param value value to bind as P_ADF_PARENT_COMP_CODE
     */
    public void setP_ADF_PARENT_COMP_CODE(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_PARENT_COMP_CODE", value);
    }

    /**
     * Returns the variable value for P_ADF_COMP_CODE.
     * @return variable value for P_ADF_COMP_CODE
     */
    public Integer getP_ADF_COMP_CODE() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_COMP_CODE");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_COMP_CODE.
     * @param value value to bind as P_ADF_COMP_CODE
     */
    public void setP_ADF_COMP_CODE(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_COMP_CODE", value);
    }

    /**
     * Returns the variable value for P_ADF_GROUP_HEADER_SNO.
     * @return variable value for P_ADF_GROUP_HEADER_SNO
     */
    public Integer getP_ADF_GROUP_HEADER_SNO() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_GROUP_HEADER_SNO");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_GROUP_HEADER_SNO.
     * @param value value to bind as P_ADF_GROUP_HEADER_SNO
     */
    public void setP_ADF_GROUP_HEADER_SNO(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_GROUP_HEADER_SNO", value);
    }
    public void doAssignERPCompanyToGroupAction() {
        ViewObject vo = getRootApplicationModule().findViewObject("SysActionGroupLinesCompanyDetCRUD");
        RowSetIterator rsi =this.getRowSet();
        rsi.setRangeSize(-1);
        for (int i=0;i<rsi.getRowCount();i++) {
            Row r = rsi.getRowAtRangeIndex(i);
            //record might be assigned through single assignment
            if (r.getAttribute("txtSelected")== null || r.getAttribute("txtSelected").toString().equals("N")) {
                r.setAttribute("txtSelected", "Y");
                Row cr = vo.createRow();
                cr.setAttribute("CompanyId", Integer.parseInt(r.getAttribute("CompCode").toString()) );
                //cr.setAttribute("ModuleId", r.getAttribute("ModuleId"));
                //cr.setAttribute("Remarks", "Copied" + r.getAttribute("ModuleAction"));
                vo.insertRow(cr);
            }
        }
        getDBTransaction().commit();
        vo.executeQuery();
        Row curRow= getRootApplicationModule().findViewObject("SysActionGroupLinesDetCRUD").getCurrentRow();
        setNamedWhereClauseParam("P_ADF_GROUP_LINES_SNO", Integer.parseInt(curRow.getAttribute("GroupLinesSno").toString()) );
        this.executeQuery();
        //executeQuery();
        //getDBTransaction().rollback();        
    }

    public void doAssignERPCompanyToGroup() {
        ViewObject vo = getRootApplicationModule().findViewObject("SysActionGroupCompanyDetCRUD");
        RowSetIterator rsi =this.getRowSet();
        rsi.setRangeSize(-1);
        for (int i=0;i<rsi.getRowCount();i++) {
            Row r = rsi.getRowAtRangeIndex(i);
            //record might be assigned through single assignment
            if (r.getAttribute("txtSelected")== null || r.getAttribute("txtSelected").toString().equals("N")) {
                r.setAttribute("txtSelected", "Y");
                Row cr = vo.createRow();
                cr.setAttribute("CompanyId", Integer.parseInt(r.getAttribute("CompCode").toString()) );
                //cr.setAttribute("ModuleId", r.getAttribute("ModuleId"));
                //cr.setAttribute("Remarks", "Copied" + r.getAttribute("ModuleAction"));
                vo.insertRow(cr);
            }
        }
        getDBTransaction().commit();
        vo.executeQuery();
        this.executeQuery();
        //executeQuery();
        //getDBTransaction().rollback();        
    }

    public void doAssignERPCompanyToUser() {
        ViewObject vo = getRootApplicationModule().findViewObject("SysUserCompanyDetCRUD");
        RowSetIterator rsi =this.getRowSet();
        rsi.setRangeSize(-1);
        for (int i=0;i<rsi.getRowCount();i++) {
            Row r = rsi.getRowAtRangeIndex(i);
            //record might be assigned through single assignment
            if (r.getAttribute("txtSelected")== null || r.getAttribute("txtSelected").toString().equals("N")) {
                r.setAttribute("txtSelected", "Y");
                Row cr = vo.createRow();
                cr.setAttribute("CompanyId", Integer.parseInt(r.getAttribute("CompCode").toString()) );
                //cr.setAttribute("ModuleId", r.getAttribute("ModuleId"));
                //cr.setAttribute("Remarks", "Copied" + r.getAttribute("ModuleAction"));
                vo.insertRow(cr);
            }
        }
        getDBTransaction().commit();
        vo.executeQuery();
        this.executeQuery();
        //executeQuery();
        //getDBTransaction().rollback();        
    }
    
    public void doAssignERPCompanyToUserAction() {
        ViewObject vo = getRootApplicationModule().findViewObject("SysUsersModuleCompanyDetCRUD");
        RowSetIterator rsi =this.getRowSet();
        rsi.setRangeSize(-1);
        for (int i=0;i<rsi.getRowCount();i++) {
            Row r = rsi.getRowAtRangeIndex(i);
            //record might be assigned through single assignment
            if (r.getAttribute("txtSelected")== null || r.getAttribute("txtSelected").toString().equals("N")) {
                r.setAttribute("txtSelected", "Y");
                Row cr = vo.createRow();
                cr.setAttribute("CompanyId", Integer.parseInt(r.getAttribute("CompCode").toString()) );
                //cr.setAttribute("ModuleId", r.getAttribute("ModuleId"));
                //cr.setAttribute("Remarks", "Copied" + r.getAttribute("ModuleAction"));
                vo.insertRow(cr);
            }
        }
        getDBTransaction().commit();
        vo.executeQuery();
        this.executeQuery();
        //executeQuery();
        //getDBTransaction().rollback();        
    }
    
    /**
     * Returns the variable value for P_ADF_GROUP_LINES_SNO.
     * @return variable value for P_ADF_GROUP_LINES_SNO
     */
    public Integer getP_ADF_GROUP_LINES_SNO() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_GROUP_LINES_SNO");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_GROUP_LINES_SNO.
     * @param value value to bind as P_ADF_GROUP_LINES_SNO
     */
    public void setP_ADF_GROUP_LINES_SNO(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_GROUP_LINES_SNO", value);
    }

    @Override
    public void executeQuery() {
        // TODO Implement this method

        /////USIN ON    SEC_0008 FORM. 
        /////FOR ACTION GROUP LINES COMPANY
        try {
            Row curRow = getRootApplicationModule().findViewObject("SysActionGroupLinesDetCRUD").getCurrentRow();
            setNamedWhereClauseParam("P_ADF_GROUP_LINES_SNO",
                                     Integer.parseInt(curRow.getAttribute("GroupLinesSno").toString()));
        } catch (Exception nfe) {
            // TODO: Add catch code
            //nfe.printStackTrace();
        } //this.executeQuery();
    
        /////USIN ON    SEC_0012 FORM. 
        /////FOR USER MODULE LINES COMPANY
        try {
            Row curRow = getRootApplicationModule().findViewObject("SysUsersModuleDetCRUD").getCurrentRow();
            setNamedWhereClauseParam("P_ADF_USERS_MODULE_SNO",
                                     Integer.parseInt(curRow.getAttribute("UsersModuleSno").toString()));
        } catch (Exception nfe) {
            // TODO: Add catch code
            //nfe.printStackTrace();
        }

       // ViewCriteriaManager cm = this.getViewCriteriaManager();
       // System.out.println("cm.getViewCriteria()"+cm.getViewCriteria());
        super.executeQuery();
        
    }

    /**
     * Returns the variable value for P_ADF_USERS_MODULE_SNO.
     * @return variable value for P_ADF_USERS_MODULE_SNO
     */
    public Integer getP_ADF_USERS_MODULE_SNO() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_USERS_MODULE_SNO");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_USERS_MODULE_SNO.
     * @param value value to bind as P_ADF_USERS_MODULE_SNO
     */
    public void setP_ADF_USERS_MODULE_SNO(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_USERS_MODULE_SNO", value);
    }

    /**
     * Returns the variable value for P_ADF_USER_ID.
     * @return variable value for P_ADF_USER_ID
     */
    public Integer getP_ADF_USER_ID() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_USER_ID");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_USER_ID.
     * @param value value to bind as P_ADF_USER_ID
     */
    public void setP_ADF_USER_ID(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_USER_ID", value);
    }
    @Override
    public void executeEmptyRowSet() {
        // TODO Implement this method
        super.executeEmptyRowSet();
    }

    /**
     * Returns the variable value for P_ADF_GLOBAL_COMPANY_CODE.
     * @return variable value for P_ADF_GLOBAL_COMPANY_CODE
     */
    public Integer getP_ADF_GLOBAL_COMPANY_CODE() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_GLOBAL_COMPANY_CODE");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_GLOBAL_COMPANY_CODE.
     * @param value value to bind as P_ADF_GLOBAL_COMPANY_CODE
     */
    public void setP_ADF_GLOBAL_COMPANY_CODE(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_GLOBAL_COMPANY_CODE", value);
    }


    /**
     * Returns the variable value for P_ADF_COPMANY_TYPE_SNO.
     * @return variable value for P_ADF_COPMANY_TYPE_SNO
     */
    public Integer getP_ADF_COPMANY_TYPE_SNO() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_COPMANY_TYPE_SNO");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_COPMANY_TYPE_SNO.
     * @param value value to bind as P_ADF_COPMANY_TYPE_SNO
     */
    public void setP_ADF_COPMANY_TYPE_SNO(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_COPMANY_TYPE_SNO", value);
    }
@Override
    public void afterRollback(TransactionEvent transactionEvent) {
        // TODO Implement this method
        setErpViewObjectName("AdminCompanyCRUD");
        setErpPkColumn("CompCode");
        setErpParameterId("P_ADF_COMP_CODE");
        
        super.afterRollback(transactionEvent);
    }

    /**
     * Returns the variable value for P_ADF_TYPE_LEVEL.
     * @return variable value for P_ADF_TYPE_LEVEL
     */
    public Integer getP_ADF_TYPE_LEVEL() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_TYPE_LEVEL");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_TYPE_LEVEL.
     * @param value value to bind as P_ADF_TYPE_LEVEL
     */
    public void setP_ADF_TYPE_LEVEL(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_TYPE_LEVEL", value);
    }

    /**
     * Returns the variable value for P_ADF_COMPANY_GROUP_SNO.
     * @return variable value for P_ADF_COMPANY_GROUP_SNO
     */
    public Integer getP_ADF_COMPANY_GROUP_SNO() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_COMPANY_GROUP_SNO");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_COMPANY_GROUP_SNO.
     * @param value value to bind as P_ADF_COMPANY_GROUP_SNO
     */
    public void setP_ADF_COMPANY_GROUP_SNO(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_COMPANY_GROUP_SNO", value);
    }

    /**
     * Returns the variable value for P_ADF_COMPANY_HIERARCHY_PATH.
     * @return variable value for P_ADF_COMPANY_HIERARCHY_PATH
     */
    public String getP_ADF_COMPANY_HIERARCHY_PATH() {
        return (String) ensureVariableManager().getVariableValue("P_ADF_COMPANY_HIERARCHY_PATH");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_COMPANY_HIERARCHY_PATH.
     * @param value value to bind as P_ADF_COMPANY_HIERARCHY_PATH
     */
    public void setP_ADF_COMPANY_HIERARCHY_PATH(String value) {
        ensureVariableManager().setVariableValue("P_ADF_COMPANY_HIERARCHY_PATH", value);
    }
}

