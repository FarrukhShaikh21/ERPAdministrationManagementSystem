package erpadm.modeladm.admvo;

import erpadm.modeladm.admvo.common.SysUsersVO;

import erpglobals.modelglobals.ERPGlobalPLSQLClass;

import erpglobals.modelglobals.ERPViewObjectImpl;

import java.sql.ResultSet;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 09 16:45:30 PKT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SysUsersVOImpl extends ERPViewObjectImpl implements SysUsersVO {
    /**
     * This is the default constructor (do not remove).
     */
    public SysUsersVOImpl() {
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        String result=ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),"select countryname from sm_country where countrycode="+value.getAttribute("CountrySno"));
        if (!result.equals("-")) {
         value.setAttribute("txtCountryName", result);
       }
        
        result=ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(),"select cityname from sm_city where citycode="+value.getAttribute("CitySno"));
        
        if (!result.equals("-")) {
         value.setAttribute("txtCityName", result);
        }
        
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

    /**
     * Returns the variable value for P_ADF_USER_ID.
     * @return variable value for P_ADF_USER_ID
     */
    public Integer getP_ADF_USER_ID() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_USER_ID");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_USER_ID.
     * @param value value to bind as P_ADF_USER_ID
     */
    public void setP_ADF_USER_ID(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_USER_ID", value);
    }

    /**
     * Returns the variable value for P_ADF_GROUP_HEADER_SNO.
     * @return variable value for P_ADF_GROUP_HEADER_SNO
     */
    public Integer getP_ADF_GROUP_HEADER_SNO() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_GROUP_HEADER_SNO");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_GROUP_HEADER_SNO.
     * @param value value to bind as P_ADF_GROUP_HEADER_SNO
     */
    public void setP_ADF_GROUP_HEADER_SNO(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_GROUP_HEADER_SNO", value);
    }
  
    public void doAssignERPUserToGroup() {
        ViewObject vo = getRootApplicationModule().findViewObject("SysActionGroupUsrGroupDetCRUD");
        RowSetIterator rsi =this.getRowSet();
        rsi.setRangeSize(-1);
        for (int i=0;i<rsi.getRowCount();i++) {
            Row r = rsi.getRowAtRangeIndex(i);
            //record might be assigned through single assignment
            if (r.getAttribute("txtSelected")== null || r.getAttribute("txtSelected").toString().equals("N")) {
                r.setAttribute("txtSelected", "Y");
                Row cr = vo.createRow();
                cr.setAttribute("UserId", Integer.parseInt(r.getAttribute("UserId").toString()) );
                //cr.setAttribute("ModuleId", r.getAttribute("ModuleId"));
                //cr.setAttribute("Remarks", "Copied" + r.getAttribute("GroupHeaderSno"));
                vo.insertRow(cr);
            }
        }
        getDBTransaction().commit();
        vo.executeQuery();
        this.executeQuery();
        //executeQuery();
        //getDBTransaction().rollback();        
    }

    /**
     * Returns the variable value for P_ADF_GLOBAL_COMPANY_ID.
     * @return variable value for P_ADF_GLOBAL_COMPANY_ID
     */
    public Integer getP_ADF_GLOBAL_COMPANY_ID() {
        return (Integer) ensureVariableManager().getVariableValue("P_ADF_GLOBAL_COMPANY_ID");
    }

    /**
     * Sets <code>value</code> for variable P_ADF_GLOBAL_COMPANY_ID.
     * @param value value to bind as P_ADF_GLOBAL_COMPANY_ID
     */
    public void setP_ADF_GLOBAL_COMPANY_ID(Integer value) {
        ensureVariableManager().setVariableValue("P_ADF_GLOBAL_COMPANY_ID", value);
    }


    @Override
    public void afterRollback(TransactionEvent transactionEvent) {
        // TODO Implement this method
        setErpPkColumn("UserId");
        setErpViewObjectName("SysUsersCRUD");
        setErpParameterId("P_ADF_USER_ID");
        
        super.afterRollback(transactionEvent);
    }
}

